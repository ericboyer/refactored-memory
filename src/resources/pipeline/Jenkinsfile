pipeline {
    environment {
        frontendImageName = "refactored-memory-frontend"
        backendImageName = "refactored-memory-backend"
        devProject = "refactored-memory-dev"
        prodProject = "refactored-memory-prod"
        // TODO Fix devTag to start with the most recent successful build
        devTag = "0.0-0"
        prodTag = ""
        destApp = "${imageName}-green"
        activeApp = ""
    }
    agent {
        kubernetes {
            cloud "openshift"
            label "build-pod"
            serviceAccount "jenkins"
            yamlFile "src/resources/openshift/build-pod.yaml"
        }
    }
    stages {
        stage('Configure Prereqs') {
            steps {
                container('python') {
                    script {
                        def version = sh(returnStdout: true, script: "python3 setup.py --version | cut -f1,2 -d.")
                        // Set the tag for the development image: version + build number
                        def withExtraChars = "${version}-" + currentBuild.number
                        devTag = withExtraChars.replaceAll("[\r\n|\n\r|\n|\r]", "")

                        // Set the tag for the production image: version
                        prodTag = "${version}"

                        echo "devTag: ${devTag}"
                        echo "prodTag: ${prodTag}"
                    }

                    sh 'python3 --version'
                    sh 'python3 -m pip install --user --upgrade -r requirements.txt'
                }
            }
        }
        stage('Package') {
            steps {
                container('python') {
                    sh 'python3 setup.py sdist bdist_wheel'
                }
            }
        }
        stage('Unit Test') {
            steps {
                container('python') {
                    sh 'python3 -m pytest tests'
                }
            }
        }
        stage('Archive') {
            steps {
                container('python') {
                    sh 'python3 -m twine upload --config-file /etc/config/.pypirc -r pypi-internal dist/*'
                }
            }
        }
        stage('Tag') {
            steps {
                sh 'echo *** TODO: Add git tag ***'
            }
        }
        stage('Static Analysis (sonarqube)') {
            steps {
                container('python') {
                    script {
                          try {
                            sh 'pylint ${WORKSPACE}/src/refactored_memory \
                                -r n \
                                --msg-template="{path}:{line} [{msg_id}({symbol}), {obj}] {msg}" \
                                2>&1 ${pylintReportPath}'
                        } catch (err) {
                            echo err.getMessage()
                            echo "Error detected but continuing on "
                        }
                    }
                }
            }

            def scannerHome = tool name: 'sonarqube-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
            def pylintReportPath = "pylint-report"
            def projectSettings="."
            def sources="."
            def sourceEncoding="UTF-8"
            def token="b9e37fece5e12ade8326f2d455749090732f0a48"

            withSonarQubeEnv('sonarqube') {
                sh 'echo PWD: ${PWD}'
                sh 'echo scannerHome: ${scannerHome}'
                sh 'ls -la ${scannerHome}/bin/sonar-scanner'
                sh "${scannerHome}/bin/sonar-scanner -X \
                                    -Dsonar.projectName=${devProject} \
                                    -Dsonar.projectKey=${devProject} \
                                    -Dsonar.host.url=${env.SONAR_HOST_URL} \
                                    -Dsonar.login=${token} \
                                    -Dsonar.settings=${projectSettings} \
                                    -Dsonar.sources=${sources} \
                                    -Dsonar.SourceEncoding=${sourceEncoding} \
                                    -Dsonar.python.pylint.reportPath=${pylintReportPath}"
            }

//            script {
//                withSonarQubeEnv('sonarqube') {
//                    // sh 'ls -la && pwd'
//                    sh "${scannerHome}/bin/sonar-scanner -X \
//                        -Dsonar.projectName=${devProject} \
//                        -Dsonar.projectKey=${devProject} \
//                        -Dsonar.host.url=${env.SONAR_HOST_URL} \
//                        -Dsonar.settings=${SONAR_PROJECT_SETTING} \
//                        -Dsonar.sources=${SONAR_SOURCES} \
//                        -Dsonar.SourceEncoding=${SONAR_SOURCE_ENCODING} \
//                        -Dsonar.python.pylint.reportPath=${pylintReportPath}"
//
//                    // sh "${SONAR_SCANNER_PATH}/bin/sonar-scanner -X -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${env.SONAR_HOST_URL} -Dsonar.projectName=${SONAR_PROJECT_NAME} -Dsonar.settings=${SONAR_PROJECT_SETTING} -Dsonar.sources=${SONAR_SOURCES} -Dsonar.SourceEncoding=UTF-8"
//                }
//            }
        }
        stage('Build App Container(s)') {
            parallel {
                stage("Build backend") {
                    steps {
                        container('python') {
                            timestamps {
                                // build backend container and tag with current version
                                sh "oc -n ${devProject} start-build bc/${backendImageName} --wait"
                                sh "oc -n ${devProject} tag ${devProject}/${backendImageName}:latest ${devProject}/${backendImageName}:${devTag}"
                            }
                        }
                    }
                }
                stage("Build frontend") {
                    steps {
                        container('python') {
                            timestamps {
                                // build frontend container and tag with current version
                                sh "oc -n ${devProject} start-build bc/${frontendImageName} --wait"
                                sh "oc -n ${devProject} tag ${devProject}/${frontendImageName}:latest ${devProject}/${frontendImageName}:${devTag}"
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy App(s) to Dev') {
            steps {
                container('python') {
                    // deploy backend
                    sh "oc -n ${devProject} set image dc/${backendImageName} ${backendImageName}=${devProject}/${backendImageName}:${devTag} --source=imagestreamtag"
                    sh "oc -n ${devProject} set env dc/${backendImageName} VERSION=\"${devTag} (${backendImageName}-dev)\""
                    rollout(devProject, backendImageName)

                    // deploy frontend
                    sh "oc -n ${devProject} set image dc/${frontendImageName} ${frontendImageName}=${devProject}/${frontendImageName}:${devTag} --source=imagestreamtag"
                    sh "oc -n ${devProject} set env dc/${frontendImageName} VERSION=\"${devTag} (${frontendImageName}-dev)\""
                    rollout(devProject, frontendImageName)
                }
            }
        }
        stage('Integration Test') {
            steps {
                container('python') {
                    sh 'echo *** TODO: Add robotframework integration tests'
                }
            }
        }
    }
}

void rollout(String project, String name) {
    script {
        // Use the OpenShift Plugin to rollout and wait for at least 1 pod in "Running" state
        openshift.withCluster() {
            openshift.withProject(project) {
                def rm = openshift.selector("dc", "${name}").rollout().latest()
                timeout(5) {
                    openshift.selector("dc", "${name}").related('pods').untilEach(1) {
                        return (it.object().status.phase == "Running")
                    }
                }
            }
        }
    }
}