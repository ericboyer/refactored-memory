pipeline {
    environment {
        frontendImageName = "refactored-memory-frontend"
        backendImageName = "refactored-memory-backend"
        devProject = "refactored-memory-dev"
        prodProject = "refactored-memory-prod"
        // TODO Fix devTag to start with the most recent successful build
        devTag = "0.0-0"
        prodTag = ""
        destApp = "${imageName}-green"
        activeApp = ""
    }
    agent {
        kubernetes {
            cloud "openshift"
            label "build-pod"
            serviceAccount "jenkins"
            yamlFile "src/resources/openshift/build-pod.yaml"
        }
    }
    stages {
        stage('Configure Prereqs') {
            steps {
                container('python') {
                    script {
                        def version = sh(returnStdout: true, script: "python3 setup.py --version | cut -f1,2 -d.")
                        // Set the tag for the development image: version + build number
                        def withExtraChars = "${version}-" + currentBuild.number
                        devTag = withExtraChars.replaceAll("[\r\n|\n\r|\n|\r]", "")

                        // Set the tag for the production image: version
                        prodTag = "${version}"

                        echo "devTag: ${devTag}"
                        echo "prodTag: ${prodTag}"
                    }

                    sh 'python3 --version'
                    sh 'python3 -m pip install --user --upgrade setuptools wheel twine'
                    sh 'python3 -m pip install --user --upgrade -r requirements.txt'
                }
            }
        }
        stage('Package') {
            steps {
                container('python') {
                    sh 'python3 setup.py sdist bdist_wheel'
                }
            }
        }
        stage('Unit Test') {
            steps {
                container('python') {
                    sh 'pytest tests'
                }
            }
        }
        stage('Archive') {
            steps {
                container('python') {
                    sh 'python3 -m twine upload --config-file /etc/config/.pypirc -r pypi-internal dist/*'
                }
            }
        }
        stage('Tag') {
            steps {
                sh 'echo Placeholder for git tagging'
            }
        }
        stage('Static Analysis') {
            steps {
                sh 'echo Placeholder for static analysis'
            }
        }
        stage('Build App Container(s)') {
            parallel {
                stage("Build backend") {
                    steps {
                        container('python') {
                            timestamps {
                                // build backend container and tag with current version
                                sh "oc -n ${devProject} start-build bc/${backendImageName} --wait --follow"
                                sh "oc -n ${devProject} tag ${devProject}/${backendImageName}:latest ${devProject}/${backendImageName}:${devTag}"
                            }
                        }
                    }
                }
                stage("Build frontend") {
                    steps {
                        container('python') {
                            timestamps {
                                // build frontend container and tag with current version
                                sh "oc -n ${devProject} start-build bc/${frontendImageName} --wait --follow"
                                sh "oc -n ${devProject} tag ${devProject}/${frontendImageName}:latest ${devProject}/${frontendImageName}:${devTag}"
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy App(s) to Dev') {
            steps {
                container('python') {
                    // deploy backend
                    sh "oc -n ${devProject} set image dc/${backendImageName} ${backendImageName}=${devProject}/${backendImageName}:${devTag} --source=imagestreamtag"
                    sh "oc -n ${devProject} set env dc/${backendImageName} VERSION=\"${devTag} (${backendImageName}-dev)\""
                    sh "oc -n ${devProject} rollout latest dc/${backendImageName}"
                    waitOnDeployment(devProject, backendImageName)

                    // deploy frontend
                    sh "oc -n ${devProject} set image dc/${frontendImageName} ${frontendImageName}=${devProject}/${frontendImageName}:${devTag} --source=imagestreamtag"
                    sh "oc -n ${devProject} set env dc/${frontendImageName} VERSION=\"${devTag} (${frontendImageName}-dev)\""
                    sh "oc -n ${devProject} rollout latest dc/${frontendImageName}"
                    waitOnDeployment(devProject, frontendImageName)
                }
            }
        }
        stage('Integration Test') {
            steps {
                container('python') {
                    sh 'echo Placeholder for integration testing with robotframework'
                }
            }
        }
//        stage('Stash image in Nexus') {
//            steps {
//                container('skopeo') {
//                    sh 'echo Placeholder for Stash image in registry'
//                    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:r3dh4t1 docker://${internalClusterRegistry}/${devProject}/${imageName}:${devTag} docker://${clusterRegistry}/${imageName}:${devTag}"
//                    // TBD: Tag the built image with the production tag.
//                    sh "oc -n ${prodProject} tag ${devProject}/${imageName}:${devTag} ${devProject}/${imageName}:${prodTag}"
//                }
//            }
//        }
    }
}

void waitOnDeployment(String project, String imageName) {
    script {
        // Use the openshift plugin to wait for the deployment to complete
        openshift.withCluster() {
            openshift.withProject(project) {
                def dc = openshift.selector("dc", "${imageName}").object()
                def dc_version = dc.status.latestVersion
                def rc = openshift.selector("rc", "${imageName}-${dc_version}").object()
                echo "Waiting for ReplicationController ${imageName}-${dc_version} to be ready"
                while (rc.spec.replicas != rc.status.readyReplicas) {
                    sleep 5
                    rc = openshift.selector("rc", "${imageName}-${dc_version}").object()
                }
            } // withProject
        } // withCluster
    }
}